//////////////////////////////////////////////////////////
// Copyright (c) Alexander Logger. All rights reserved. //
//////////////////////////////////////////////////////////

namespace SharpMTProto
{
    using System;

    public struct MTProtoSessionTag : IEquatable<MTProtoSessionTag>
    {
        public static readonly MTProtoSessionTag Empty = new MTProtoSessionTag();

        public MTProtoSessionTag(ulong authKeyId, ulong sessionId) : this()
        {
            AuthKeyId = authKeyId;
            SessionId = sessionId;
        }

        /// <summary>
        ///     Key Identifier. The 64 lower-order bits of the SHA1 hash of the authorization key
        ///     are used to indicate which particular key was used to encrypt a message.
        ///     Keys must be uniquely defined by the 64 lower-order bits of their SHA1,
        ///     and in the event of a collision, an authorization key is regenerated.
        ///     A zero key identifier means that encryption is not used which is permissible
        ///     for a limited set of message types used during registration to generate
        ///     an authorization key based on a Diffie-Hellman exchange.
        /// </summary>
        public ulong AuthKeyId { get; private set; }

        /// <summary>
        ///     Session is a (random) 64-bit number generated by the client to distinguish between individual sessions (for
        ///     example, between different instances of the application, created with the same authorization key). The session in
        ///     conjunction with the key identifier corresponds to an application instance. The server can maintain session state.
        ///     Under no circumstances can a message meant for one session be sent into a different session. The server may
        ///     unilaterally forget any client sessions; clients should be able to handle this.
        /// </summary>
        public ulong SessionId { get; private set; }

        public MTProtoSessionTag UpdateSessionId(ulong sessionId)
        {
            return new MTProtoSessionTag(AuthKeyId, sessionId);
        }

        public MTProtoSessionTag UpdateAuthKeyId(ulong authKeyId)
        {
            return new MTProtoSessionTag(authKeyId, SessionId);
        }

        public override string ToString()
        {
            return string.Format("AuthKeyId: {0}, SessionId: {1}", AuthKeyId, SessionId);
        }

        #region Equality

        public bool Equals(MTProtoSessionTag other)
        {
            return AuthKeyId == other.AuthKeyId && SessionId == other.SessionId;
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj))
                return false;
            return obj is MTProtoSessionTag && Equals((MTProtoSessionTag) obj);
        }

        public override int GetHashCode()
        {
            unchecked
            {
                return (AuthKeyId.GetHashCode()*397) ^ SessionId.GetHashCode();
            }
        }

        public static bool operator ==(MTProtoSessionTag left, MTProtoSessionTag right)
        {
            return left.Equals(right);
        }

        public static bool operator !=(MTProtoSessionTag left, MTProtoSessionTag right)
        {
            return !left.Equals(right);
        }

        #endregion
    }
}
